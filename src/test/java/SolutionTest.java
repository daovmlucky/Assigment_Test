/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import behavior.CatSinging;
import behavior.ChickenSinging;
import behavior.DefaultBehaivorFlying;
import behavior.DefaultBehaviorSinging;
import behavior.DefaultBehaviorWalking;
import behavior.DogSinging;
import behavior.DuckSinging;
import behavior.DuckSwimming;
import behavior.RoosterSinging;

import static org.junit.Assert.*;

import org.junit.Before;

public class SolutionTest {
	
	private static String SOUND_DUCK = "Quack, quack";
	private static String SOUND_CHICKEN = "Cluck, cluck";
	private static String SOUND_ROOSTER = "Cock-a-doodle-doo";
	private static String SOUND_DOG = "Woof, woof";
	private static String SOUND_CAT = "Meow";
	Bird bird;
	Duck duck;
	Chicken chicken;
	Rooster rooster;
	Dog dog;
	Cat cat; 
	
	@Before
	public void setUpd() {
		bird = new Bird(new DefaultBehaivorFlying(), new DefaultBehaviorSinging(), new DefaultBehaviorWalking());
		duck = new Duck(new DefaultBehaivorFlying(), new DuckSinging(), new DefaultBehaviorWalking(), new DuckSwimming());
		chicken = new Chicken(new ChickenSinging(), new DefaultBehaviorWalking());
		rooster = new Rooster(new RoosterSinging(), new DefaultBehaviorWalking());
		dog = new Dog(new DogSinging(), new DefaultBehaviorWalking());
		cat = new Cat(new CatSinging(), new DefaultBehaviorWalking());
	}
	
    @Test
    public void testSingMethodBirdNotNull() {
        assertNotNull(bird.sing());
    }
    
    @Test
    public void testSingMethodDuckNotNull() {
    	assertNotNull(duck.sing());
    }
    
    @Test
    public void testSingMethodDuckValid() {
     	assertEquals(duck.sing(), SOUND_DUCK);
    }
    
    @Test
    public void testSingMethodChickenNotNull() {
    	assertNotNull(chicken.sing());
    }
    
    @Test
    public void testSingMethodChickenValid() {
    	assertEquals(chicken.sing(),SOUND_CHICKEN);
    }
    
    
    @Test
    public void testSingMethodRoosterNotNull() {
    	assertNotNull(rooster.sing());
    }
    
    @Test
    public void testSingMethodRoosterValid() {
    	assertEquals(rooster.sing(),SOUND_ROOSTER);
    }
    
    @Test
    public void testParotLivingWithDogValid() {
    	Parrot p = new Parrot(new DefaultBehaivorFlying(), new DefaultBehaviorSinging(), new DefaultBehaviorWalking());
    	assertEquals(p.sing(dog),SOUND_DOG);
    }
    
    @Test
    public void testParotLivingWithCatValid() {
    	Parrot p = new Parrot(new DefaultBehaivorFlying(), new DefaultBehaviorSinging(), new DefaultBehaviorWalking());
    	assertEquals(p.sing(cat),SOUND_CAT);
    }
    
    public void testParotLivingWithRoosterValid() {
    	Parrot p = new Parrot(new DefaultBehaivorFlying(), new DefaultBehaviorSinging(), new DefaultBehaviorWalking());
    	assertEquals(p.sing(rooster),SOUND_ROOSTER);
    }
    
}
